# name of your github action
name: CI
# this will help you specify where to run 
on:
  push:
    branches:
    # run on the develop branch
     - develop
# this is where the magic happens, each job happens in parallel btw
jobs:
  build_on_mac:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@master
      with:
        ref: main
    - uses: actions/setup-node@master
      with:
        node-version: 17.3
    - name: see directory
      run: ls
    - name: Install dependencies
      run: yarn install
    - name: Build on MacOS
      run: yarn run dist -p onTagOrDraft
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEBUG: electron-builder
    - name: see directory in dist
      run: ls -l ./dist
    - uses: actions/upload-artifact@v3
      with:
        name: my-macos-artifact
        path: dist/shoebox*.dmg
  
  build_on_linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
      with:
        ref: main
    - uses: actions/setup-node@master
      with:
        node-version: 17.3
    - name: see directory
      run: ls
    - name: Install dependencies
      run: yarn install
    - name: Build on linux
      run: yarn run dist -p onTagOrDraft
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEBUG: electron-builder
    - name: see directory in dist
      run: ls -l ./dist
    - uses: actions/upload-artifact@v3
      with:
        name: my-linux-artifact
        path: dist/shoebox*AppImage
    # - name: Upload the artifacts
    #     uses: skx/github-action-publish-binaries@master
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     with:
    #       args: 'dist/shoebox*AppImage'
  
  build_on_win:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@master
      with:
        ref: main        
    - uses: actions/setup-node@master
      with:
        node-version: 17.3
    # - name: install node tools
    #   run: yarn global add windows-build-tools
    # - name: install node-gyp
    #   run: yarn global add node-gyp
    - name: Install dependencies
      run: yarn install
    - name: Build on Windows
      run: yarn run dist -p onTagOrDraft
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEBUG: electron-builder
    - name: see directory
      run: ls ./dist
    - uses: actions/upload-artifact@v3
      with:
        name: my-windows-artifact
        path: dist/shoebox*.exe

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
# this is where the magic happens, each job happens in parallel btw
jobs:
  build_on_mac:
    runs-on: macOS-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@master
      with:
        ref: main
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: true
        prerelease: true
    - uses: actions/setup-node@master
      with:
        node-version: 17.3
    - name: see directory
      run: ls
    - name: Install dependencies
      run: yarn install
    - name: Build on MacOS
      run: yarn run dist -p onTagOrDraft
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEBUG: electron-builder
    - name: see directory in dist
      run: ls -l ./dist
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: dist/shoebox*.dmg
#        asset_name: shoebox.dmg
        asset_content_type: application/octet-stream
  
  build_on_linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
      with:
        ref: main
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: true
        prerelease: true
    - uses: actions/setup-node@master
      with:
        node-version: 17.3
    - name: see directory
      run: ls
    - name: Install dependencies
      run: yarn install
    - name: Build on linux
      run: yarn run dist -p onTagOrDraft
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEBUG: electron-builder
    - name: see directory in dist
      run: ls -l ./dist
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: dist/shoebox*AppImage
#        asset_name: shoebox.AppImage
        asset_content_type: application/octet-stream
  
  build_on_win:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@master
      with:
        ref: main        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: true
        prerelease: true
    - uses: actions/setup-node@master
      with:
        node-version: 17.3
    # - name: install node tools
    #   run: yarn global add windows-build-tools
    # - name: install node-gyp
    #   run: yarn global add node-gyp
    - name: Install dependencies
      run: yarn install
    - name: Build on Windows
      run: yarn run dist -p onTagOrDraft
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEBUG: electron-builder
    - name: see directory
      run: ls ./dist
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: dist/shoebox*.exe
#        asset_name: shoebox.exe
        asset_content_type: application/octet-stream